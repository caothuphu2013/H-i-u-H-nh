// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------

/*
void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);

    if ((which == SyscallException) && (type == SC_Halt)) {
	DEBUG('a', "Shutdown, initiated by user program.\n");
   	interrupt->Halt();
    } else {
	printf("Unexpected user mode exception %d %d\n", which, type);
	ASSERT(FALSE);
    }
}*/

//Chuyen address to char*
char* User2System(int address,int limit) {
	char* buff = NULL;

	buff = new char[limit +1]; //Cap phat 
	if (buff == NULL)
		return buff;
	/* Ham memset duoc viet lai:
	for (int i = 0;i <= limit;i++) 
		buff[i] = 0;
	*/
	memset(buff,0,limit+1);
	int c;
	for (int i = 0 ; i < limit ;i++) {
		machine->ReadMem(address + i,1,&c);
		buff[i] = (char)c;
		if (c == 0)	//Neu gap ki tu ket thuc chuoi thi dung lai.
			break;
	}
	return buff;
}

//convert char* to 
int System2User(int address,int limit,char* buff)
{
	if (limit < 0) 
		return -1;
	if (limit == 0)
		return limit;
	int i = 0;
	int c = 0;
	do {
		c= (int) buff[i];
		machine->WriteMem(address + i,1,c);
		i++;
	}while(i < limit && c != 0);
	return i;
}

/*
//---Cau a---
void
ExceptionHandler(ExceptionType which)
{
    	int type = machine->ReadRegister(2);
	
    	if (which == NoException)
		return;

    	else if ((which == SyscallException) && (type == SC_Halt)) {
		//DEBUG('a', "Shutdown, initiated by user program.\n");
		printf("A program executed a system call %d %d\n",which,type);
   		interrupt->Halt();
    	}
	
        else if (which == PageFaultException) {
		printf("No valid translation found\n");
		interrupt->Halt();			
    	}

	else if (which == ReadOnlyException) {
		printf("Write attempted to page marked 'read-only'\n");
		interrupt->Halt();			
	}

	else if (which == BusErrorException) {
		printf("Translation resulted in an invalid physical address\n");
		interrupt->Halt();
	}

	else if (which == AddressErrorException) {
		printf("Unaligned reference or one that was beyond the end of the address space\n");
		interrupt->Halt();			
	}

	else if (which == OverflowException) {
		printf("Integer overflow in add or sub\n");
		interrupt->Halt();		
	}

	else if (which == IllegalInstrException) {
		printf("Unimplemented or reserved instr\n");
		interrupt->Halt();		
	}

	else if (which == NumExceptionTypes) {	
		printf("Error\n");
		interrupt->Halt();		
	}

        else {
		printf("Unexpected user mode exception %d %d\n", which, type);
		ASSERT(FALSE);
    	}
}
*/

void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);
	switch (which) {
		case NoException:
			return;
		case SyscallException: {
			switch(type) {
				case SC_Halt: {
					//printf("A program executed a system call %d %d\n",which,type);
					DEBUG('a', "Shutdown, initiated by user program.\n");
					interrupt->Halt();	
					break;
				}

				case SC_Exit:
					break;
				case SC_Exec:
					break;
				case SC_Join:
					break;
				case SC_Create:
					break;
				case SC_Open:
					break;
				case SC_Read:
					break;
				case SC_Write:
					break;
				case SC_Close:
					break;
				case SC_Fork:
					break;
				case SC_Yield:
					break;

				case SC_ReadInt: {
					char *str = new char[30];
					gsc->Read(str,30);
					int num = 0;
					int mult = 1;
											
					while (('-' == (*str)) || ((*str) == '+') || ((*str) == ' '))
					{
						if (*str == '-')
							mult = mult * -1;
						str++;
					}
					while ((*str >= '0') && (*str <= '9'))
					{
						num = (num * 10) + ((*str) - '0');
						str++;
					}
			
					int result = num * mult;
					machine->WriteRegister(2,result);
		
					break;
				}

				case SC_PrintInt: {
					int n = machine->ReadRegister(4);
					
					// Convert Number To Char*
					const int minInt = -2147483648;
					char* buff = new char[20];
					int lengthStr;
					if (n == 0) {
						buff = "0";
						lengthStr = 1;	//Nếu không cập nhật lại length thì sẽ bị lỗi 
					}
					else if (n <= minInt) { //Trường hợp min của kiểu long int	
						buff = "-2147483648";
						lengthStr = 11;	//Nếu không cập nhật lại length thì sẽ bị lỗi
					}
					else {
						int index = 0;
						int i = 0, temp = 0;
						if (n >= 0) {
							temp = n;
						}
						else {
							temp = n * -1;
							i = 1;
							index = 1;
						}

						// Xử lý chuyển đổi số dương
						while (temp != 0) {
							buff[i] = temp % 10 + 48;
							temp /= 10;
							i++;
						}
						buff[i] = '\0';

						lengthStr = i;
						int len = 0, iIndex = 0;
						if (index) {
							len = (float)lengthStr / 2.0 + 0.5;
							iIndex = 0;
						}
						else {
							len = lengthStr / 2;
							iIndex = 1;
						}
						i = index;

						while (i < len) {
							char tmp = buff[lengthStr - i - iIndex];
							buff[lengthStr - i - iIndex] = buff[i];
							buff[i] = tmp;
							i++;
						}
						buff[lengthStr] = '\0';
						if (index)
							buff[0] = '-';
					}

					gsc->Write(buff,lengthStr);
					break;
					
				}

				case SC_ReadChar: {
					char* str = new char[2];
					gsc->Read(str,2);
					
					char c = str[0];
					machine->WriteRegister(2,c);
					break;
				}
				
				case SC_PrintChar: {
					int n = machine->ReadRegister(4);
					
					char *c = new char[2];
					c[0] = n;
					c[1] = 0;

					gsc->Write(c,2);
					break;
				}

				case SC_ReadString: {
					int address = machine->ReadRegister(4);
					int limit = machine->ReadRegister(5);
					char* buff = new char[limit + 1];
					memset(buff,0,limit + 1);
					gsc->Read(buff,limit);
					System2User(address,limit,buff);
					break;
				}

				case SC_PrintString: {
					int address = machine->ReadRegister(4);
					char *str = User2System(address,255);
					gsc->Write(str,255);
					break;
				}

			}
			machine->registers[PrevPCReg] = machine->registers[PCReg];
			machine->registers[PCReg] = machine->registers[NextPCReg];
			machine->registers[NextPCReg] += 4;
			break;
		}
		case PageFaultException: {
			printf("No valid translation found\n");
			interrupt->Halt();			
			break;
		}
		case ReadOnlyException: {
			printf("Write attempted to page marked 'read-only'\n");
			interrupt->Halt();			
			break;
		}
		case BusErrorException: {
			printf("Translation resulted in an invalid physical address\n");
			interrupt->Halt();			
			break;

		}
		case AddressErrorException: {
			printf("Unaligned reference or one that was beyond the end of the address space\n");
			interrupt->Halt();			
			break;
		}
		case OverflowException: {
			printf("Integer overflow in add or sub\n");
			interrupt->Halt();			
			break;
		}
		case IllegalInstrException: {
			printf("Unimplemented or reserved instr\n");
			interrupt->Halt();			
			break;
		}
		case NumExceptionTypes: {	
			printf("Error\n");
			interrupt->Halt();			
			break;
		}
		default:
			printf("Unexpected user mode exception %d %d\n", which, type);
			ASSERT(FALSE);
	}	
}


